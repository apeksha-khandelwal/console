#!/bin/bash -e

# This script contains all jenkins work.
# This runs directly on the jenkins build host.
# The Jenkins build command should do nothing but execute this script.

CURRENT_USER=$(whoami)
CURRENT_UID=$(id -u "$CURRENT_USER")
echo "Running under user: $CURRENT_USER, with uid: $CURRENT_UID"

# We assume the jenkins jenkins user with uid 1000 on all build hosts
export BUILDER_RUN_USER=1000

if [ ${BUILDER_RUN_USER} -eq "${CURRENT_UID}" ]; then
    echo "Running under User: ${CURRENT_USER}, with UID: ${CURRENT_UID}"
else
    echo "Expected to run with UID: ${BUILDER_RUN_USER}, instead UID is: ${CURRENT_UID}. Fix Jenkins and try again."
    exit 1
fi

status() {
    # Hide output so we don't leak creds
    set +x
    data=$(cat << EOF
{
  "context": "$1",
  "state": "$2",
  "description": "$1 $2.",
  "target_url": "${BUILD_URL}console"
}
EOF
)
    # shellcheck disable=SC2154
    curl -o /dev/null --silent -X POST --user "${GITHUB_CREDENTIALS}" \
    --data "$data" \
    "https://api.github.com/repos/coreos-inc/bridge/statuses/${ghprbActualCommit}"
    set -x
}

set -x
./clean

set +e

status 'Build' 'pending'
if ./builder-run ./build
then
    status 'Build' 'success'
else
    status 'Build' 'error'
    exit 1
fi

status 'Tests' 'pending'
if ./builder-run ./test
then
    status 'Tests' 'success'
else
    status 'Tests' 'error'
    exit 1
fi

status 'GUI Tests' 'pending'
if DOCKER_ENV="TECTONIC_LICENSE,BRIDGE_K8S_AUTH_BEARER_TOKEN" ./builder-run ./test-gui
then
    status 'GUI Tests' 'success'
else
    status 'GUI Tests' 'error'
fi

set -e

GIT_SHA_HEAD=$(git rev-parse HEAD)
GIT_SHA_MASTER=$(git rev-parse origin/master)
IS_RELEASE_TAG=$(git describe --exact-match --abbrev=0 --tags "${GIT_SHA_HEAD}" 2> /dev/null || :)
if [ "$GIT_SHA_HEAD" == "$GIT_SHA_MASTER" ]; then
    echo "detected master build. building & pushing images..."
    ./push
elif [ ! -z "$IMAGE_TAG" ]; then
    echo "detected request to push built image using tag ${IMAGE_TAG}. building & pushing images..."
   ./push
elif [ -n "$IS_RELEASE_TAG" ]; then
    echo "detected release tag ${IS_RELEASE_TAG}. building & pushing images..."
    ./push
else
    echo "skipping image push. HEAD sha does not appear to be master, nor is it a release tag: $GIT_SHA_HEAD"
fi
